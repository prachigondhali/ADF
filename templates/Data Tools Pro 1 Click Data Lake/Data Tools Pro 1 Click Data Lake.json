{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name"
		},
		"AzueADFStaging": {
			"type": "string"
		},
		"MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS": {
			"type": "string"
		},
		"MySalesforceInstance": {
			"type": "string"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Data Tools Pro 1 Click Data Lake')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GenerateSFDCTables",
						"description": "Generate your Salesforce Staging Tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "EnvironmentConfigScripts",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "GenerateSFDCTable",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SINKOBJECTS": {
									"value": "@pipeline().parameters.SinkSalesforceObjects",
									"type": "Expression"
								},
								"DATABASENAME": {
									"value": "@pipeline().parameters.DatabaseName",
									"type": "Expression"
								},
								"SCHEMANAME": {
									"value": "@pipeline().parameters.SchemaName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "LoadSFDCData",
						"description": "Migrate data from Salesforce into your Stage Tables",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "GenerateSFDCTables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "LoadSFDCData",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"SINKOBJECTS": {
									"value": "@pipeline().parameters.SinkSalesforceObjects",
									"type": "Expression"
								},
								"DATABASENAME": {
									"value": "@pipeline().parameters.DatabaseName",
									"type": "Expression"
								},
								"SCHEMANAME": {
									"value": "@pipeline().parameters.SchemaName",
									"type": "Expression"
								}
							}
						}
					},
					{
						"name": "EnvironmentConfigScripts",
						"description": "Configure your Snowflake schema, meta data tables, and install stored procedures.",
						"type": "ExecutePipeline",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "EnvironmentConfigScripts",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"DATABASENAME": {
									"value": "@pipeline().parameters.DatabaseName",
									"type": "Expression"
								},
								"SCHEMANAME": {
									"value": "@pipeline().parameters.SchemaName",
									"type": "Expression"
								},
								"CREATENEWSCHEMA": {
									"value": "@pipeline().parameters.CreateNewSchema",
									"type": "Expression"
								}
							}
						}
					}
				],
				"parameters": {
					"SinkSalesforceObjects": {
						"type": "string",
						"defaultValue": "Lead,User"
					},
					"SchemaName": {
						"type": "string",
						"defaultValue": "YOUR_SCHEMA"
					},
					"DatabaseName": {
						"type": "string",
						"defaultValue": "LINKED_SERVICE_DB"
					},
					"ConfigureEnvironment": {
						"type": "string",
						"defaultValue": "yes"
					},
					"CreateNewSchema": {
						"type": "string",
						"defaultValue": "yes"
					},
					"AssignPermissions": {
						"type": "string",
						"defaultValue": "no"
					},
					"RecordLimit": {
						"type": "string",
						"defaultValue": "LIMIT 10000000"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Lake"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/GenerateSFDCTable')]",
				"[concat(variables('factoryId'), '/pipelines/LoadSFDCData')]",
				"[concat(variables('factoryId'), '/pipelines/EnvironmentConfigScripts')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/GenerateSFDCTable')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Create Sink Table Set Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('ObjectsArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set ObjectName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ObjectName",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get SFDC Objet Fields and Type_copy1",
									"description": "Pulls all fields, types, and object relationships and posts to Snowflake table called SFDC_METADATA_STAGE. Truncates before inserting to ensure we always have freshest metadata from Salesforce",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Purge Object Metadata",
											"dependencyConditions": [
												"Completed"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"additionalColumns": [
												{
													"name": "ObjectName",
													"value": {
														"value": "@variables('ObjectName')",
														"type": "Expression"
													}
												}
											],
											"query": {
												"value": "@concat('select QualifiedApiName, DataType, DeveloperName, ValueTypeId,RelationshipName,Label,Id,Precision,Length from FieldDefinition\nwhere EntityDefinitionId=','''',variables('ObjectName'),'''')",
												"type": "Expression"
											},
											"readBehavior": "query"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "[parameters('AzueADFStaging')]",
												"type": "LinkedServiceReference"
											},
											"path": "adf-stage/stage"
										},
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"name": "ObjectName",
														"type": "String"
													},
													"sink": {
														"name": "OBJECTNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "QualifiedApiName",
														"type": "String"
													},
													"sink": {
														"name": "QUALIFIEDAPINAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DataType",
														"type": "String"
													},
													"sink": {
														"name": "DATATYPE",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "DeveloperName",
														"type": "String"
													},
													"sink": {
														"name": "DEVELOPERNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "RelationshipName",
														"type": "String"
													},
													"sink": {
														"name": "RELATIONSHIPNAME",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "ValueTypeId",
														"type": "String"
													},
													"sink": {
														"name": "VALUETYPEID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Precision",
														"type": "Int32"
													},
													"sink": {
														"name": "PRECISION",
														"type": "Int64"
													}
												},
												{
													"source": {
														"name": "Label",
														"type": "String"
													},
													"sink": {
														"name": "LABEL",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Id",
														"type": "String"
													},
													"sink": {
														"name": "ID",
														"type": "String"
													}
												},
												{
													"source": {
														"name": "Length",
														"type": "Int32"
													},
													"sink": {
														"name": "LENGTH",
														"type": "Int64"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "SalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"APIName": "FieldDefinition "
											}
										}
									],
									"outputs": [
										{
											"referenceName": "PREPARE_TABLE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": "SFDC_METADATA_STAGE",
												"SchemaName": {
													"value": "@variables('SchemaName')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Purge Object Metadata",
									"description": "Purges the Salesforce object meta data so new meta data values can be updated",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set ObjectName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('delete from ',variables('DatabaseName'),'.',variables('SchemaName'),'.SFDC_METADATA_STAGE where ObjectName = ','''',variables('ObjectName'),'''')",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "EXECUTE DDL",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "NonQuery",
												"text": {
													"value": "@replace(replace(variables('DDLScript'), '\\\\\"', '\"'), '\\\\n', '\\u0010')\n",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								},
								{
									"name": "Run_DDLFromMetaData",
									"description": "Runs a stored procedure in Snowflake that obtains a DDL for a given Salesforce metadata. Concat from: CALL TABLE.SCHEMA.DDLFromMetaData('Opportunity', 'Name2');",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Get SFDC Objet Fields and Type_copy1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeSource",
											"query": {
												"value": "@concat(\n'CALL ',\nvariables('DatabaseName'),\n'.',variables('SchemaName'),'.',\n'DDLFromMetaData(',\n'''',\nvariables('ObjectName'),\n'''',\n', ',\n'''',\n'Name2',\n'''',\n');'\n\n)",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "PREPARE_TABLE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@variables('ObjectName')",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@variables('SchemaName')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Run_DDLFromMetaData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "DDLScript",
										"value": {
											"value": "@json(string(activity('Run_DDLFromMetaData').output.firstRow)).DDLFROMMETADATA\n",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Create Sink Table Set Variable",
						"description": "Pulled from SINKOBJECTS parameter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set SchemaName Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ObjectsArray",
							"value": {
								"value": "@split(pipeline().parameters.SINKOBJECTS,',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DatabaseName Variable",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatabaseName",
							"value": {
								"value": "@pipeline().parameters.DATABASENAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SchemaName Variable",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set DatabaseName Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SchemaName",
							"value": {
								"value": "@pipeline().parameters.SCHEMANAME",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"SINKOBJECTS": {
						"type": "string"
					},
					"DATABASENAME": {
						"type": "string"
					},
					"SCHEMANAME": {
						"type": "string"
					}
				},
				"variables": {
					"ObjectName": {
						"type": "String"
					},
					"DatabaseName": {
						"type": "String"
					},
					"DDLScript": {
						"type": "String"
					},
					"ObjectsArray": {
						"type": "Array"
					},
					"SchemaName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Lake"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SalesforceObject')]",
				"[concat(variables('factoryId'), '/datasets/PREPARE_TABLE')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/LoadSFDCData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Set RecordLimit Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@variables('ObjectsArray')",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Set ObjectName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ObjectName",
										"value": {
											"value": "@item()",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Run_ADFmappingFromSFDCMetaData",
									"description": "Runs a stored procedure in Snowflake that obtains a DDL for a given Salesforce metadata. Concat from: CALL GG_DEVELOPMENT_OPPS.MIGRATION_STAGE.DDLFromMetaData('Opportunity', 'Name2');",
									"type": "Lookup",
									"dependsOn": [
										{
											"activity": "Set ObjectName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SnowflakeSource",
											"query": {
												"value": "@concat(\n'CALL ',\nvariables('DatabaseName'),\n'.',variables('SchemaName'),'.',\n'ADFmappingFromSFDCMetaData(',\n'''',\nvariables('ObjectName'),\n'''',\n', ',\n'''',\n'Name2',\n'''',\n');'\n\n)",
												"type": "Expression"
											},
											"exportSettings": {
												"type": "SnowflakeExportCopyCommand"
											}
										},
										"dataset": {
											"referenceName": "PREPARE_TABLE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": " ",
												"SchemaName": {
													"value": "@variables('SchemaName')",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "Set ADFMetaScript Variable",
									"description": "Pulls SFDC meta data and formats into ADF metadata used for mapping. This ensures the data coming out of Salesforce can be mapped to Snowflake dynamically.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Run_ADFmappingFromSFDCMetaData",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ADFMetaScript",
										"value": {
											"value": "@json(string(activity('Run_ADFmappingFromSFDCMetaData').output.firstRow)).ADFMAPPINGFROMSFDCMETADATA",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Move Data from SFDC to SNOW",
									"description": "Last step pulls data out of Salesforce, uses the ADFMetaScript to map Salesforce to final Snowflake Table.\n\nBecause meta data is pulled live the 2 systems are always in sync.",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set ADFMetaScript Variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SalesforceSource",
											"readBehavior": "query"
										},
										"sink": {
											"type": "SnowflakeSink",
											"importSettings": {
												"type": "SnowflakeImportCopyCommand"
											}
										},
										"enableStaging": true,
										"stagingSettings": {
											"linkedServiceName": {
												"referenceName": "[parameters('AzueADFStaging')]",
												"type": "LinkedServiceReference"
											},
											"path": "adf-stage/stage"
										},
										"translator": {
											"value": "@variables('ADFMetaScript')",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "SalesforceObject",
											"type": "DatasetReference",
											"parameters": {
												"APIName": {
													"value": "@concat(variables('ObjectName'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "PREPARE_TABLE",
											"type": "DatasetReference",
											"parameters": {
												"TableName": {
													"value": "@toUpper(variables('ObjectName'))",
													"type": "Expression"
												},
												"SchemaName": {
													"value": "@variables('SchemaName')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Data Movement Set Variable",
						"description": "Pulled from SINKOBJECTS parameter",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set SchemaName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ObjectsArray",
							"value": {
								"value": "@split(pipeline().parameters.SINKOBJECTS,',')",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set DatabaseName Variable",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatabaseName",
							"value": {
								"value": "@pipeline().parameters.DATABASENAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SchemaName",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set DatabaseName Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SchemaName",
							"value": {
								"value": "@pipeline().parameters.SCHEMANAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set RecordLimit Variable",
						"description": "",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Data Movement Set Variable",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "RecordLimit",
							"value": {
								"value": "@pipeline().parameters.RECORDLIMIT",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"SINKOBJECTS": {
						"type": "string"
					},
					"DATABASENAME": {
						"type": "string"
					},
					"SCHEMANAME": {
						"type": "string"
					},
					"RECORDLIMIT": {
						"type": "string"
					}
				},
				"variables": {
					"ObjectName": {
						"type": "String"
					},
					"DatabaseName": {
						"type": "String"
					},
					"DDLScript": {
						"type": "String"
					},
					"ObjectsArray": {
						"type": "Array"
					},
					"ADFMetaScript": {
						"type": "String"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "MIGRATION_STAGE"
					},
					"RecordLimit": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Lake"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/PREPARE_TABLE')]",
				"[concat(variables('factoryId'), '/datasets/SalesforceObject')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/EnvironmentConfigScripts')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CreateMetaDataStage",
						"description": "Creates a table called SFDC_METADATA_STAGE in your Snowflake schema using fields stored in MetaDataTableObjects variable",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Check Create Schema",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('create or replace TABLE ',variables('DatabaseName'),'.',variables('SchemaName'),'.SFDC_METADATA_STAGE',variables('MetaDataTableObjects'))",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Set DatabaseName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "CreateNewSchema",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DatabaseName",
							"value": {
								"value": "@pipeline().parameters.DATABASENAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set SchemaName",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "Set DatabaseName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "SchemaName",
							"value": {
								"value": "@pipeline().parameters.SCHEMANAME",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Install DDL Stored Proc",
						"description": "Install DDL Stored Procecure DDLFromMetaData",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Create LOG TABLE",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "@concat(\n    'CREATE OR REPLACE PROCEDURE ',variables('DatabaseName'),'.',variables('SchemaName'),'.DDLFromMetaData',\n    variables('DDLFromMetaData')\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Install ADF Mapping Stored Proc",
						"description": "Install ADF Mapping Stored Procedure ADFmappingFromSFDCMetaData",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "Install DDL Stored Proc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "NonQuery",
									"text": {
										"value": "@concat(\n    'CREATE OR REPLACE PROCEDURE ',variables('DatabaseName'),'.',variables('SchemaName'),'.ADFmappingFromSFDCMetaData',\n    variables('ADFmappingFromSFDCMetaData')\n)",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Create LOG TABLE",
						"description": "Creates a table called LOGTABLE",
						"type": "Script",
						"dependsOn": [
							{
								"activity": "CreateMetaDataStage",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": {
										"value": "@concat('create or replace TABLE ',variables('DatabaseName'),'.',variables('SchemaName'),'.LOGTABLE',variables('LOGTABLE'))",
										"type": "Expression"
									}
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Check Create Schema",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Set SchemaName",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('CreateNewSchema'), 'yes')",
								"type": "Expression"
							},
							"ifTrueActivities": [
								{
									"name": "CreateSchema_MetaDataStage_copy1",
									"description": "Creates a schema called MIGRATION_STAGE in your Snowflake table ",
									"type": "Script",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "@concat('create or replace SCHEMA ',variables('DatabaseName'),'.',variables('SchemaName'))",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "CreateNewSchema",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "CreateNewSchema",
							"value": {
								"value": "@pipeline().parameters.CREATENEWSCHEMA",
								"type": "Expression"
							}
						}
					}
				],
				"parameters": {
					"DATABASENAME": {
						"type": "string"
					},
					"SCHEMANAME": {
						"type": "string",
						"defaultValue": "MIGRATION_STAGE"
					},
					"CREATENEWSCHEMA": {
						"type": "string"
					}
				},
				"variables": {
					"DatabaseName": {
						"type": "String"
					},
					"MetaDataTableObjects": {
						"type": "String",
						"defaultValue": "(OBJECTNAME VARCHAR(255), QUALIFIEDAPINAME VARCHAR(255), DATATYPE VARCHAR(255), DEVELOPERNAME VARCHAR(255), RELATIONSHIPNAME VARCHAR(255), VALUETYPEID VARCHAR(255), PRECISION NUMBER(38,0), LABEL VARCHAR(255), \tID VARCHAR(255), LENGTH NUMBER(38,0) );"
					},
					"SchemaName": {
						"type": "String",
						"defaultValue": "MIGRATION_STAGE"
					},
					"DDLFromMetaData": {
						"type": "String",
						"defaultValue": "(OBJECTNAME VARCHAR, EXCLUDE VARCHAR) RETURNS VARCHAR LANGUAGE JAVASCRIPT AS $$ var current_database_result = snowflake.execute({sqlText: \"SELECT CURRENT_DATABASE()\"}); current_database_result.next(); var current_database_value = current_database_result.getColumnValue(1);  var current_schema_result = snowflake.execute({sqlText: \"SELECT CURRENT_SCHEMA()\"}); current_schema_result.next(); var current_schema_value = current_schema_result.getColumnValue(1);  var metadata_table = current_database_value + \".\" + current_schema_value + \".SFDC_METADATA_STAGE\"; var sql_command = \"SELECT OBJECTNAME, QUALIFIEDAPINAME, VALUETYPEID, LENGTH FROM \" + metadata_table + \" WHERE OBJECTNAME = '\" + OBJECTNAME + \"'\"; if (EXCLUDE !== null && EXCLUDE !== '') {   sql_command += \" AND QUALIFIEDAPINAME NOT IN ('\" + EXCLUDE.replace(/,/g, \"','\") + \"')\"; } var result = snowflake.execute({sqlText: sql_command});  var column_names = []; var column_types = [];  while (result.next()) {   column_names.push(result.getColumnValue(\"QUALIFIEDAPINAME\"));   var valuetype = result.getColumnValue(\"VALUETYPEID\");   var length = result.getColumnValue(\"LENGTH\");    if (valuetype == \"id\") {     column_types.push(\"VARCHAR(\" + length + \")\");   } else if (valuetype == \"string\") {     column_types.push(\"VARCHAR(\" + length + \")\");   } else if (valuetype == \"boolean\") {     column_types.push(\"BOOLEAN\");   } else if (valuetype == \"double\") {     column_types.push(\"FLOAT\");   } else if (valuetype == \"integer\") {     column_types.push(\"INT\");   } else if (valuetype == \"datetime\") {     column_types.push(\"TIMESTAMP_NTZ\");   } else if (valuetype == \"date\") {     column_types.push(\"DATE\");   } else {     column_types.push(\"VARCHAR(255)\");   } }  var DDL = \"CREATE OR REPLACE TABLE \" + current_database_value + \".\" + current_schema_value + \".\" + OBJECTNAME + \" (\\n\"; for (var i = 0; i < column_names.length; i++) {   DDL += \"  \\\"\" + column_names[i] + \"\\\" \" + column_types[i] + \",\\n\"; } DDL = DDL.slice(0, -2) + \"\\n);\";  return DDL; $$;"
					},
					"ADFmappingFromSFDCMetaData": {
						"type": "String",
						"defaultValue": "(OBJECTNAME STRING, EXCLUDE STRING)   RETURNS STRING   LANGUAGE JAVASCRIPT   AS   $$   var current_database_result = snowflake.execute({sqlText: \"SELECT CURRENT_DATABASE()\"});   current_database_result.next();   var current_database_value = current_database_result.getColumnValue(1);    var current_schema_result = snowflake.execute({sqlText: \"SELECT CURRENT_SCHEMA()\"});   current_schema_result.next();   var current_schema_value = current_schema_result.getColumnValue(1);    var metadata_table = current_database_value + \".\" + current_schema_value + \".SFDC_METADATA_STAGE\";    var sql = `     SELECT OBJECTNAME, QUALIFIEDAPINAME, VALUETYPEID, LENGTH     FROM ` + metadata_table + `     WHERE OBJECTNAME = '` + OBJECTNAME + `' AND QUALIFIEDAPINAME NOT IN ('` + EXCLUDE.split(',').join(\"','\") + `')   `;    var stmt = snowflake.createStatement({sqlText: sql});   var resultSet = stmt.execute();   var mappings = [];    function valueTypeToDataType(valueType) {     switch (valueType) {       case \"id\": return \"String\";       case \"string\": return \"String\";       case \"boolean\": return \"Boolean\";       case \"double\": return \"Decimal\";       case \"integer\": return \"Integer\";       case \"datetime\": return \"Date/Time\";       case \"date\": return \"Date/Time\";       case \"address\": return \"String\";       default: return \"String\";     }   }    while (resultSet.next()) {     var qualifiedApiName = resultSet.getColumnValue(2);     var valueType = resultSet.getColumnValue(3);     var dataType = valueTypeToDataType(valueType);      var mapping = {       source: {         name: qualifiedApiName,         type: dataType       },       sink: {         name: qualifiedApiName,         type: dataType       }     };      mappings.push(mapping);   }    var output = {     type: \"TabularTranslator\",     mappings: mappings   };    return JSON.stringify(output, null, 2);   $$   ;"
					},
					"LOGTABLE": {
						"type": "String",
						"defaultValue": "(JOBDATE DATETIME, RESULT_TYPE VARCHAR(255), RESULT VARIANT,NODE VARCHAR(255));"
					},
					"CreateNewSchema": {
						"type": "String"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Lake"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SalesforceObject')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Salesforce.com Opportunity",
				"linkedServiceName": {
					"referenceName": "[parameters('MySalesforceInstance')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"APIName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Migration Sets"
				},
				"annotations": [],
				"type": "SalesforceObject",
				"schema": [],
				"typeProperties": {
					"objectApiName": {
						"value": "@dataset().APIName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PREPARE_TABLE')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Salesforce View Opportunity",
				"linkedServiceName": {
					"referenceName": "[parameters('MySnowflakeInstance_SFDC_GG_DEVELOPMENT_OPPS')]",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					},
					"SchemaName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Data Tools Pro 1 Click Data Migration Sets"
				},
				"annotations": [],
				"type": "SnowflakeTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().SchemaName",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": []
		}
	]
}